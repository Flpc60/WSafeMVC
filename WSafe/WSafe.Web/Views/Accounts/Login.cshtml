@model WSafe.Web.Models.LoginViewModel

@{
    ViewBag.Title = "Login";
    Layout = null;
}

<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - WSafe</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="~/Content/bootstrap-table.min.css" rel="stylesheet" />
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script src="~/Scripts/GestorRiesgos.js" type="text/javascript"></script>
    <script src="~/Scripts/AuditsGestor.js" type="text/javascript"></script> <!-- funciones gráficas y auditorías--->>

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jqueryunobtrusive")
    @Scripts.Render("~/bundles/jqueryval")

    <style>

        .tabMessage, .tabValidation {
            display: none;
        }

        #signatureCanvas {
            border: 1px solid #000;
            width: 100%;
            height: 200px;
        }
    </style>

</head>
<body>
    @using (Html.BeginForm(FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="container login-container">
            <div class="row">
                <div class="col-md-8 offset-md-2">
                    <div class="panel-heading">
                        <p class="panel-title text-center">
                            <strong>WSafe plataforma digital para apoyar a las empresas a mejorar la seguridad y la salud en el lugar de trabajo y cumplir con las reglamentaciones pertinentes.</strong>
                        </p>
                    </div>
                </div>
                <div class="col-md-4 offset-md-4">
                    <img src="~/Images/wsafe.jpg" alt="WSafe Logo" class="avatar img-fluid">
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <i class="fa fa-users"></i>
                        <label for="txtName">Usuario</label><br>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @id = "txtName", @placeholder = "Ingresa nombre de usuario", autofocus = true } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <i class="fa fa-envelope" aria-hidden="true"></i>
                        <label for="">Correo</label><br>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "txtEmail", @placeholder = "Ingresa correo electrónico" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <i class="fa fa-key"></i>
                        <label for="">Contraseña</label><br>
                        <div class="col-md-12">
                            <input type="password" name="txtPassword" id="txtPassword" class="form-control" placeholder="Ingresa contraseña" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row tabClients">
                <div class="col-md-12">
                    <div class="form-group">
                        <i class="fa fa-landmark"></i>
                        <label for="">Consultoría</label><br>
                        <div class="col-md-12">
                            @Html.DropDownListFor(model => model.ClientID, Model.Clients, new { @class = "form-control", @id = "clientID" })
                            @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row tabOrganization">
                <div class="col-md-12">
                    <div class="form-group">
                        <i class="fa fa-landmark"></i>
                        <label for="">Organización</label><br>
                        <div class="col-md-12">
                            <select name="orgID" class="form-control form-control-lg" id="orgID">
                                <option selected="selected" value="0">Seleccione una organización ...</option>
                            </select>
                            <span class="field-validation-valid text-danger" data-valmsg-replace="true" data-valmsg-for="orgID"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tabMessage">
                <div class="col-md-12">
                    <div class="alert alert-danger" role="alert">
                        <p id="txtLogin" style="color:red; text-align:center; padding:1%"></p>
                    </div>
                </div>
            </div>
            <div class="tabValidation">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="signatureCanvas">Firma Electrónica:</label>
                        <canvas id="signatureCanvas"></canvas>
                        <button type="button" id="clearSignature" class="btn btn-secondary mt-2">Borrar firma</button>
                        <button type="button" id="btnAddUser" class="btn btn-secondary mt-2" onclick="AddUser()">Guardar</button>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                </div>
                <div class="col-md-8">
                    <br /><button type="button" class="btn btn-info btn-lg btn-block" onclick="validateRegister();">Registrar usuario</button>
                    <button type="button" class="btn btn-success btn-lg btn-block" onclick="LoginUser()">Iniciar sesión</button>
                    <button type="button" class="btn btn-danger btn-lg btn-block" onclick="logout()">Cerrar sesión</button>
                </div>
                <div class="col-md-2">
                </div>
            </div>
        </div>
    }

    <div class="container">
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - WSafeApp.com</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/Scripts/bootstrap-table/bootstrap-table.min.js")
    @Scripts.Render("~/Scripts/GestorRiesgos.js")
    @Scripts.Render("~/Scripts/AuditsGestor.js")
    @Scripts.Render("~/Scripts/CapacitationsGestor.js")

    <script>
        let canvas = document.getElementById('signatureCanvas');
        let context = canvas.getContext('2d');
        let isDrawing = false;
        let lastX = 0, lastY = 0;
        let scaleX, scaleY;

        function initializeCanvas() {
            let ratio = window.devicePixelRatio || 1;
            canvas.width = canvas.offsetWidth * ratio;
            canvas.height = canvas.offsetHeight * ratio;
            context.scale(ratio, ratio);
            scaleX = canvas.width / canvas.offsetWidth;
            scaleY = canvas.height / canvas.offsetHeight;
            context.lineWidth = 2;
            context.lineCap = 'round';
            context.strokeStyle = '#000';
        }

        initializeCanvas();

        window.addEventListener('resize', function () {
            initializeCanvas();
        });

        canvas.addEventListener('mousedown', function (e) {
            isDrawing = true;
            [lastX, lastY] = [e.offsetX * scaleX, e.offsetY * scaleY];
        });

        canvas.addEventListener('mousemove', function (e) {
            if (!isDrawing) return;
            context.beginPath();
            context.moveTo(lastX, lastY);
            context.lineTo(e.offsetX * scaleX, e.offsetY * scaleY);
            context.stroke();
            [lastX, lastY] = [e.offsetX * scaleX, e.offsetY * scaleY];
        });

        canvas.addEventListener('mouseup', function () {
            isDrawing = false;
        });

        canvas.addEventListener('mouseout', function () {
            isDrawing = false;
        });

        document.getElementById('clearSignature').addEventListener('click', function () {
            context.clearRect(0, 0, canvas.width, canvas.height);
        });

        function validateRegister() {
            $(".tabValidation").css("display", "block");
            return true;
        }

        function logout() {
            window.close();
        }

    </script>

</body>
</html>
