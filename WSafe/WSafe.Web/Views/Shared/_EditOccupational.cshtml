@model WSafe.Domain.Models.CreateOccupationalVM

@{
    var id = Model.ID;
}

<style>

    .tabSigueOccupational, .tabAddSigue {
        display: none;
    }
</style>

<div class="container" style="background-color:azure; padding:20px;">
    <hr class="mt-4">
    <h4 style="text-align:center"><strong>REGISTRAR EXÁMEN MEDICO OCUPACIONAL</strong></h4>
    <hr class="mt-4">
    <div class="row">

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.ExaminationDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5 col-sm-10">
                    @Html.EditorFor(model => model.ExaminationDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ExaminationDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="form-group">
                @Html.LabelFor(model => model.TrabajadorID, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8 col-sm-10">
                    @Html.DropDownListFor(model => model.TrabajadorID, Model.Workers, new { @class = "form-control", @id = "workerID" })
                    @Html.ValidationMessageFor(model => model.TrabajadorID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.Talla, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Talla, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Talla, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.Peso, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Peso, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Peso, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.ExaminationType, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EnumDropDownListFor(model => model.ExaminationType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ExaminationType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                @Html.LabelFor(model => model.Recomendations, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Recomendations, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Recomendations, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.MedicalRecomendation, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.EnumDropDownListFor(model => model.MedicalRecomendation, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MedicalRecomendation, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-md-10 col-sm-10">
                    <input type="file" name="fileLoad" id="fileLoad" accept="image/*, video/*">
                    @Html.ValidationMessageFor(model => model.FileName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="container">
                    <input type="submit" value="Guardar" class="btn btn-primary" />
                    <button type="button" id="btnSigue" class="btn btn-success" onclick="ShowSigueOccupationals(@Model.ID);">
                        <span class="glyphicon glyphicon-forward"></span>
                    </button>
                    @Html.ActionLink("Listar evaluaciones", "Index", new { @class = "glyphicon glyphicon-plus" },
                    new { @class = "btn btn-info" })
                </div>
            </div>
        </div>
        <div class="col-md-6"></div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="tabSigueOccupational">
                <input type="hidden" id="occupationalID" name="occupationalID" />
                <hr />
                <div class="container">
                    <button type="button" class="btn btn-primary" id="addTraceabilityID">Adicionar nuevo seguimiento</button>
                    @Html.Partial("_ShowOccupational")
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="tabAddSigue">
                @Html.Partial("_EditSigueOccupational")
                <hr />
                <div class="row">
                    <div class="col-md-8">
                        <button type="button" id="btnAddTraceability" class="btn btn-primary" onclick="addSigueOccupational(@Model.ID);">Adicionar</button>
                        <button type="button" id="btnUpdTraceability" class="btn btn-primary" onclick="updateSigueOccupational(@Model.ID)">Actualizar</button>
                        <button type="button" id="btnCanTraceability" class="btn btn-primary" onclick="cancelSigueOccupational()">
                            <span class="glyphicon glyphicon-chevron-left"></span> Cerrar
                        </button>
                        <hr />
                    </div>
                    <div class="col-md-4">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <p style="color:red;font-size:18px;text-align:center"><strong>@ViewBag.message</strong></p>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

        $(document).ready(function () {
            $('#btnCanTraceability').click(function () {
                $('.tabAddSigue').css("display", "none");
                $('#btnAddTraceability').hide();
                $('#btnUpdTraceability').hide();
            });
            $('#addTraceabilityID').click(function () {
                $('.tabAddSigue').css("display", "block");
                $('#dateSigue').focus();
                $('#btnAddTraceability').show();
                $('#btnUpdTraceability').hide();
            });
            $('#dateSigue').click(function () {
                var dateInput = $('#dateSigue').val(); // Obtener el valor del campo de fecha
                var dateControl = $('#dateControl').val(); // Obtener el valor del campo de fecha
                var fecha = Date.parse(dateInput);
                var fechaFin = Date.parse(dateControl);
                if (fecha.getTime() > fechaFin.getTime() || isNaN(fechaFin.getTime())) {
                    return false;
                };
            });
        });

    </script>

}
